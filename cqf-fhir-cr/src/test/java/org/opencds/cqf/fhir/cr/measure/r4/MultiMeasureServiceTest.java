package org.opencds.cqf.fhir.cr.measure.r4;

import static org.junit.Assert.assertThrows;

import org.junit.jupiter.api.Test;
import org.opencds.cqf.fhir.cr.measure.r4.MultiMeasure.Given;

public class MultiMeasureServiceTest {
    private static final Given GIVEN_REPO = MultiMeasure.given().repositoryFor("MinimalMeasureEvaluation");

    @Test
    void MultiMeasure_EightMeasures_AllSubjects() {
        var when = GIVEN_REPO
                .when()
                .measureId("MinimalProportionNoBasisSingleGroup")
                .measureId("MinimalProportionBooleanBasisSingleGroup")
                .measureId("MinimalRatioBooleanBasisSingleGroup")
                .measureId("MinimalRatioResourceBasisSingleGroup")
                .measureId("MinimalCohortResourceBasisSingleGroup")
                .measureId("MinimalCohortBooleanBasisSingleGroup")
                .measureId("MinimalContinuousVariableResourceBasisSingleGroup")
                .measureId("MinimalContinuousVariableBooleanBasisSingleGroup")
                .periodStart("2024-01-01")
                .periodEnd("2024-12-31")
                .reportType("population")
                .evaluate();

        when.then()
                .hasMeasureReportCount(8)
                .measureReport("http://example.com/Measure/MinimalProportionNoBasisSingleGroup")
                .hasReportType("Summary")
                .firstGroup()
                .population("initial-population")
                .hasCount(8)
                .up()
                .population("denominator")
                .hasCount(5)
                .up()
                .population("denominator-exclusion")
                .hasCount(2)
                .up()
                .population("denominator-exception")
                .hasCount(1)
                .up()
                .population("numerator-exclusion")
                .hasCount(2)
                .up()
                .population("numerator")
                .hasCount(3)
                .up()
                .hasScore("0.6")
                .up()
                .up()
                .measureReport("http://example.com/Measure/MinimalProportionBooleanBasisSingleGroup")
                .hasReportType("Summary")
                .firstGroup()
                .population("initial-population")
                .hasCount(8)
                .up()
                .population("denominator")
                .hasCount(5)
                .up()
                .population("denominator-exclusion")
                .hasCount(2)
                .up()
                .population("denominator-exception")
                .hasCount(1)
                .up()
                .population("numerator-exclusion")
                .hasCount(2)
                .up()
                .population("numerator")
                .hasCount(3)
                .up()
                .hasScore("0.6")
                .up()
                .up()
                .measureReport("http://example.com/Measure/MinimalRatioBooleanBasisSingleGroup")
                .firstGroup()
                .population("initial-population")
                .hasCount(8)
                .up()
                .population("denominator")
                .hasCount(6)
                .up()
                .population("denominator-exclusion")
                .hasCount(2)
                .up()
                .population("numerator-exclusion")
                .hasCount(2)
                .up()
                .population("numerator")
                .hasCount(3)
                .up()
                .hasScore("0.5")
                .up()
                .up()
                .measureReport("http://example.com/Measure/MinimalRatioResourceBasisSingleGroup")
                .firstGroup()
                .population("initial-population")
                .hasCount(9)
                .up()
                .population("denominator")
                .hasCount(7)
                .up()
                .population("denominator-exclusion")
                .hasCount(2)
                .up()
                .population("numerator-exclusion")
                .hasCount(2)
                .up()
                .population("numerator")
                .hasCount(3)
                .up()
                .hasScore("0.42857142857142855")
                .up()
                .up()
                .measureReport("http://example.com/Measure/MinimalCohortResourceBasisSingleGroup")
                .firstGroup()
                .population("initial-population")
                .hasCount(9)
                .up()
                .up()
                .up()
                .measureReport("http://example.com/Measure/MinimalCohortBooleanBasisSingleGroup")
                .firstGroup()
                .population("initial-population")
                .hasCount(8)
                .up()
                .up()
                .up()
                .measureReport("http://example.com/Measure/MinimalContinuousVariableResourceBasisSingleGroup")
                .firstGroup()
                .population("initial-population")
                .hasCount(9)
                .up()
                .population("measure-population")
                .hasCount(7)
                .up()
                .population("measure-population-exclusion")
                .hasCount(2)
                .up()
                .population("measure-observation")
                .hasCount(7)
                .up()
                .up()
                .up()
                .measureReport("http://example.com/Measure/MinimalContinuousVariableBooleanBasisSingleGroup")
                .firstGroup()
                .population("initial-population")
                .hasCount(8)
                .up()
                .population("measure-population")
                .hasCount(6)
                .up()
                .population("measure-population-exclusion")
                .hasCount(2);
    }

    @Test
    void MultiMeasure_EightMeasures_Patient() {
        var when = GIVEN_REPO
                .when()
                .measureId("MinimalProportionNoBasisSingleGroup")
                .measureId("MinimalProportionBooleanBasisSingleGroup")
                .measureId("MinimalRatioBooleanBasisSingleGroup")
                .measureId("MinimalRatioResourceBasisSingleGroup")
                .measureId("MinimalCohortResourceBasisSingleGroup")
                .measureId("MinimalCohortBooleanBasisSingleGroup")
                .measureId("MinimalContinuousVariableResourceBasisSingleGroup")
                .measureId("MinimalContinuousVariableBooleanBasisSingleGroup")
                .periodStart("2024-01-01")
                .periodEnd("2024-12-31")
                .reportType("subject")
                .subject("Patient/female-1988")
                .evaluate();

        when.then()
                .hasMeasureReportCount(8)
                .measureReport("http://example.com/Measure/MinimalProportionNoBasisSingleGroup")
                .hasReportType("Individual")
                .hasSubjectReference("Patient/female-1988")
                .hasEvaluatedResourceCount(1)
                .firstGroup()
                .population("initial-population")
                .hasCount(1)
                .up()
                .population("denominator")
                .hasCount(1)
                .up()
                .population("denominator-exclusion")
                .hasCount(0)
                .up()
                .population("denominator-exception")
                .hasCount(0)
                .up()
                .population("numerator-exclusion")
                .hasCount(0)
                .up()
                .population("numerator")
                .hasCount(1)
                .up()
                .hasScore("1.0")
                .up()
                .up()
                .measureReport("http://example.com/Measure/MinimalProportionBooleanBasisSingleGroup")
                .hasReportType("Individual")
                .hasSubjectReference("Patient/female-1988")
                .hasEvaluatedResourceCount(1)
                .firstGroup()
                .population("initial-population")
                .hasCount(1)
                .up()
                .population("denominator")
                .hasCount(1)
                .up()
                .population("denominator-exclusion")
                .hasCount(0)
                .up()
                .population("denominator-exception")
                .hasCount(0)
                .up()
                .population("numerator-exclusion")
                .hasCount(0)
                .up()
                .population("numerator")
                .hasCount(1)
                .up()
                .hasScore("1.0")
                .up()
                .up()
                .measureReport("http://example.com/Measure/MinimalRatioBooleanBasisSingleGroup")
                .hasReportType("Individual")
                .hasSubjectReference("Patient/female-1988")
                .hasEvaluatedResourceCount(1)
                .firstGroup()
                .population("initial-population")
                .hasCount(1)
                .up()
                .population("denominator")
                .hasCount(1)
                .up()
                .population("denominator-exclusion")
                .hasCount(0)
                .up()
                .population("numerator-exclusion")
                .hasCount(0)
                .up()
                .population("numerator")
                .hasCount(1)
                .up()
                .hasScore("1.0")
                .up()
                .up()
                .measureReport("http://example.com/Measure/MinimalRatioResourceBasisSingleGroup")
                .hasReportType("Individual")
                .hasSubjectReference("Patient/female-1988")
                .hasEvaluatedResourceCount(3)
                .firstGroup()
                .population("initial-population")
                .hasCount(2)
                .up()
                .population("denominator")
                .hasCount(2)
                .up()
                .population("denominator-exclusion")
                .hasCount(0)
                .up()
                .population("numerator-exclusion")
                .hasCount(0)
                .up()
                .population("numerator")
                .hasCount(1)
                .up()
                .hasScore("0.5")
                .up()
                .up()
                .measureReport("http://example.com/Measure/MinimalCohortResourceBasisSingleGroup")
                .hasReportType("Individual")
                .hasSubjectReference("Patient/female-1988")
                .hasEvaluatedResourceCount(2)
                .firstGroup()
                .population("initial-population")
                .hasCount(2)
                .up()
                .up()
                .up()
                .measureReport("http://example.com/Measure/MinimalCohortBooleanBasisSingleGroup")
                .hasReportType("Individual")
                .hasSubjectReference("Patient/female-1988")
                .hasEvaluatedResourceCount(1)
                .firstGroup()
                .population("initial-population")
                .hasCount(1)
                .up()
                .up()
                .up()
                .measureReport("http://example.com/Measure/MinimalContinuousVariableResourceBasisSingleGroup")
                .hasReportType("Individual")
                .hasSubjectReference("Patient/female-1988")
                .hasEvaluatedResourceCount(3)
                .firstGroup()
                .population("initial-population")
                .hasCount(2)
                .up()
                .population("measure-population")
                .hasCount(2)
                .up()
                .population("measure-population-exclusion")
                .hasCount(0)
                .up()
                .population("measure-observation")
                .hasCount(2)
                .up()
                .up()
                .up()
                .measureReport("http://example.com/Measure/MinimalContinuousVariableBooleanBasisSingleGroup")
                .hasReportType("Individual")
                .hasSubjectReference("Patient/female-1988")
                .hasEvaluatedResourceCount(1)
                .firstGroup()
                .population("initial-population")
                .hasCount(1)
                .up()
                .population("measure-population")
                .hasCount(1)
                .up()
                .population("measure-population-exclusion")
                .hasCount(0);
    }

    @Test
    void MultiMeasure_EightMeasures_SubjectList() {
        var when = GIVEN_REPO
                .when()
                .measureId("MinimalProportionNoBasisSingleGroup")
                .measureId("MinimalProportionBooleanBasisSingleGroup")
                .measureId("MinimalRatioBooleanBasisSingleGroup")
                .measureId("MinimalRatioResourceBasisSingleGroup")
                .measureId("MinimalCohortResourceBasisSingleGroup")
                .measureId("MinimalCohortBooleanBasisSingleGroup")
                .measureId("MinimalContinuousVariableResourceBasisSingleGroup")
                .measureId("MinimalContinuousVariableBooleanBasisSingleGroup")
                .periodStart("2024-01-01")
                .periodEnd("2024-12-31")
                .reportType("subject-list")
                .subject("Patient/female-1988")
                .evaluate();

        when.then()
                .hasMeasureReportCount(8)
                .measureReport("http://example.com/Measure/MinimalProportionNoBasisSingleGroup")
                .hasReportType("Subject List")
                .hasSubjectReference("Patient/female-1988")
                .firstGroup()
                .population("initial-population")
                .hasCount(1)
                .hasSubjectResults()
                .up()
                .population("denominator")
                .hasCount(1)
                .hasSubjectResults()
                .up()
                .population("denominator-exclusion")
                .hasCount(0)
                .up()
                .population("denominator-exception")
                .hasCount(0)
                .up()
                .population("numerator-exclusion")
                .hasCount(0)
                .up()
                .population("numerator")
                .hasCount(1)
                .hasSubjectResults()
                .up()
                .hasScore("1.0")
                .up()
                .up()
                .measureReport("http://example.com/Measure/MinimalProportionBooleanBasisSingleGroup")
                .hasReportType("Subject List")
                .hasSubjectReference("Patient/female-1988")
                .firstGroup()
                .population("initial-population")
                .hasCount(1)
                .hasSubjectResults()
                .up()
                .population("denominator")
                .hasCount(1)
                .hasSubjectResults()
                .up()
                .population("denominator-exclusion")
                .hasCount(0)
                .up()
                .population("denominator-exception")
                .hasCount(0)
                .up()
                .population("numerator-exclusion")
                .hasCount(0)
                .up()
                .population("numerator")
                .hasCount(1)
                .hasSubjectResults()
                .up()
                .hasScore("1.0")
                .up()
                .up()
                .measureReport("http://example.com/Measure/MinimalRatioBooleanBasisSingleGroup")
                .hasReportType("Subject List")
                .hasSubjectReference("Patient/female-1988")
                .firstGroup()
                .population("initial-population")
                .hasCount(1)
                .hasSubjectResults()
                .up()
                .population("denominator")
                .hasCount(1)
                .hasSubjectResults()
                .up()
                .population("denominator-exclusion")
                .hasCount(0)
                .up()
                .population("numerator-exclusion")
                .hasCount(0)
                .up()
                .population("numerator")
                .hasCount(1)
                .hasSubjectResults()
                .up()
                .hasScore("1.0")
                .up()
                .up()
                .measureReport("http://example.com/Measure/MinimalRatioResourceBasisSingleGroup")
                .hasReportType("Subject List")
                .hasSubjectReference("Patient/female-1988")
                .firstGroup()
                .population("initial-population")
                .hasCount(2)
                .hasSubjectResults()
                .up()
                .population("denominator")
                .hasCount(2)
                .hasSubjectResults()
                .up()
                .population("denominator-exclusion")
                .hasCount(0)
                .up()
                .population("numerator-exclusion")
                .hasCount(0)
                .up()
                .population("numerator")
                .hasCount(1)
                .hasSubjectResults()
                .up()
                .hasScore("0.5")
                .up()
                .up()
                .measureReport("http://example.com/Measure/MinimalCohortResourceBasisSingleGroup")
                .hasReportType("Subject List")
                .hasSubjectReference("Patient/female-1988")
                .firstGroup()
                .population("initial-population")
                .hasSubjectResults()
                .hasCount(2)
                .up()
                .up()
                .up()
                .measureReport("http://example.com/Measure/MinimalCohortBooleanBasisSingleGroup")
                .hasReportType("Subject List")
                .hasSubjectReference("Patient/female-1988")
                .firstGroup()
                .population("initial-population")
                .hasSubjectResults()
                .hasCount(1)
                .up()
                .up()
                .up()
                .measureReport("http://example.com/Measure/MinimalContinuousVariableResourceBasisSingleGroup")
                .hasReportType("Subject List")
                .hasSubjectReference("Patient/female-1988")
                .firstGroup()
                .population("initial-population")
                .hasCount(2)
                .hasSubjectResults()
                .up()
                .population("measure-population")
                .hasCount(2)
                .hasSubjectResults()
                .up()
                .population("measure-population-exclusion")
                .hasCount(0)
                .up()
                .population("measure-observation")
                .hasCount(2)
                .up()
                .up()
                .up()
                .measureReport("http://example.com/Measure/MinimalContinuousVariableBooleanBasisSingleGroup")
                .hasReportType("Subject List")
                .hasSubjectReference("Patient/female-1988")
                .firstGroup()
                .population("initial-population")
                .hasCount(1)
                .hasSubjectResults()
                .up()
                .population("measure-population")
                .hasCount(1)
                .hasSubjectResults()
                .up()
                .population("measure-population-exclusion")
                .hasCount(0);
    }

    @Test
    void MultiMeasure_EightMeasures_PractitionerJustId() {
        var when = GIVEN_REPO
                .when()
                .measureId("MinimalProportionNoBasisSingleGroup")
                .periodStart("2024-01-01")
                .periodEnd("2024-12-31")
                .reportType("population")
                .practitioner("tester")
                .evaluate();

        when.then()
                .hasMeasureReportCount(1)
                .measureReport("http://example.com/Measure/MinimalProportionNoBasisSingleGroup")
                .hasReportType("Summary")
                .hasSubjectReference("Practitioner/tester")
                .firstGroup()
                .population("initial-population")
                .hasCount(1)
                .up()
                .population("denominator")
                .hasCount(0)
                .up()
                .population("denominator-exclusion")
                .hasCount(0)
                .up()
                .population("denominator-exception")
                .hasCount(1)
                .up()
                .population("numerator-exclusion")
                .hasCount(0)
                .up()
                .population("numerator")
                .hasCount(0);
    }

    @Test
    void MultiMeasure_EightMeasures_Practitioner() {
        var when = GIVEN_REPO
                .when()
                .measureId("MinimalProportionNoBasisSingleGroup")
                .periodStart("2024-01-01")
                .periodEnd("2024-12-31")
                .reportType("population")
                .practitioner("Practitioner/tester")
                .evaluate();

        when.then()
                .hasMeasureReportCount(1)
                .measureReport("http://example.com/Measure/MinimalProportionNoBasisSingleGroup")
                .hasReportType("Summary")
                .hasSubjectReference("Practitioner/tester")
                .firstGroup()
                .population("initial-population")
                .hasCount(1)
                .up()
                .population("denominator")
                .hasCount(0)
                .up()
                .population("denominator-exclusion")
                .hasCount(0)
                .up()
                .population("denominator-exception")
                .hasCount(1)
                .up()
                .population("numerator-exclusion")
                .hasCount(0)
                .up()
                .population("numerator")
                .hasCount(0);
    }

    @Test
    void MultiMeasure_EightMeasures_ReporterPractitioner() {
        var when = GIVEN_REPO
                .when()
                .measureId("MinimalProportionNoBasisSingleGroup")
                .periodStart("2024-01-01")
                .periodEnd("2024-12-31")
                .reportType("population")
                .practitioner("tester")
                .reporter("Practitioner/empty")
                .evaluate();

        when.then()
                .hasMeasureReportCount(1)
                .measureReport("http://example.com/Measure/MinimalProportionNoBasisSingleGroup")
                .hasReportType("Summary")
                .hasSubjectReference("Practitioner/tester")
                .hasReporter("Practitioner/empty");
    }

    @Test
    void MultiMeasure_EightMeasures_ReporterPractitionerRole() {
        var when = GIVEN_REPO
                .when()
                .measureId("MinimalProportionNoBasisSingleGroup")
                .periodStart("2024-01-01")
                .periodEnd("2024-12-31")
                .reportType("population")
                .practitioner("tester")
                .reporter("PractitionerRole/test")
                .evaluate();

        when.then()
                .hasMeasureReportCount(1)
                .measureReport("http://example.com/Measure/MinimalProportionNoBasisSingleGroup")
                .hasReportType("Summary")
                .hasSubjectReference("Practitioner/tester")
                .hasReporter("PractitionerRole/test");
    }

    @Test
    void MultiMeasure_EightMeasures_ReporterLocation() {
        var when = GIVEN_REPO
                .when()
                .measureId("MinimalProportionNoBasisSingleGroup")
                .periodStart("2024-01-01")
                .periodEnd("2024-12-31")
                .reportType("population")
                .practitioner("tester")
                .reporter("Location/office")
                .evaluate();

        when.then()
                .hasMeasureReportCount(1)
                .measureReport("http://example.com/Measure/MinimalProportionNoBasisSingleGroup")
                .hasReportType("Summary")
                .hasSubjectReference("Practitioner/tester")
                .hasReporter("Location/office");
    }

    @Test
    void MultiMeasure_EightMeasures_ReporterOrganization() {
        var when = GIVEN_REPO
                .when()
                .measureId("MinimalProportionNoBasisSingleGroup")
                .periodStart("2024-01-01")
                .periodEnd("2024-12-31")
                .reportType("population")
                .practitioner("tester")
                .reporter("Organization/payer")
                .evaluate();

        when.then()
                .hasMeasureReportCount(1)
                .measureReport("http://example.com/Measure/MinimalProportionNoBasisSingleGroup")
                .hasReportType("Summary")
                .hasSubjectReference("Practitioner/tester")
                .hasReporter("Organization/payer");
    }

    @Test
    void MultiMeasure_EightMeasures_ReporterJustId() {
        var when = GIVEN_REPO
                .when()
                .measureId("MinimalProportionNoBasisSingleGroup")
                .periodStart("2024-01-01")
                .periodEnd("2024-12-31")
                .reportType("population")
                .practitioner("tester")
                .reporter("payer")
                .evaluate();

        assertThrows(IllegalArgumentException.class, () -> when.then()
                .hasMeasureReportCount(1)
                .measureReport("http://example.com/Measure/MinimalProportionNoBasisSingleGroup")
                .hasReportType("Summary")
                .hasSubjectReference("Practitioner/tester")
                .hasReporter("Organization/payer"));
    }

    @Test
    void MultiMeasure_EightMeasures_ReporterNull() {
        var when = GIVEN_REPO
                .when()
                .measureId("MinimalProportionNoBasisSingleGroup")
                .periodStart("2024-01-01")
                .periodEnd("2024-12-31")
                .reportType("population")
                .practitioner("tester")
                .reporter(null)
                .evaluate();

        when.then()
                .hasMeasureReportCount(1)
                .measureReport("http://example.com/Measure/MinimalProportionNoBasisSingleGroup")
                .hasReportType("Summary")
                .hasSubjectReference("Practitioner/tester")
                .hasReporter(null);
    }

    @Test
    void MultiMeasure_EightMeasures_ReporterNotAcceptedResource() {
        var when = GIVEN_REPO
                .when()
                .measureId("MinimalProportionNoBasisSingleGroup")
                .periodStart("2024-01-01")
                .periodEnd("2024-12-31")
                .reportType("population")
                .practitioner("tester")
                .reporter("Patient/male-2022")
                .evaluate();

        assertThrows(IllegalArgumentException.class, () -> when.then()
                .hasMeasureReportCount(1)
                .measureReport("http://example.com/Measure/MinimalProportionNoBasisSingleGroup")
                .hasReportType("Summary")
                .hasSubjectReference("Practitioner/tester")
                .hasReporter("Patient/male-2022"));
    }
}
